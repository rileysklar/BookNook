# Supabase Integration Troubleshooting Guide

## ðŸš¨ **Errors Encountered & Solutions**

### **Phase 1: Database Schema Issues**

#### **Error: `relation "profiles" does not exist`**
- **Problem**: The `profiles` table wasn't created because the schema script failed
- **Root Cause**: Schema creation script didn't complete successfully
- **Solution**: Created tables manually one by one to identify the issue
- **Lesson**: Always verify schema creation step by step

#### **Error: `function get_all_libraries() does not exist`**
- **Problem**: API trying to call database functions that weren't created yet
- **Root Cause**: Functions were created after the API route was already written
- **Solution**: Created the CRUD functions in the correct order
- **Lesson**: Create database functions before writing API code

### **Phase 2: Foreign Key Constraint Issues**

#### **Error: `insert or update on table "users" violates foreign key constraint "users_id_fkey"`**
- **Problem**: Trying to insert into `users` table that references `auth.users` (Clerk's table)
- **Root Cause**: Complex foreign key relationships between `users` â†’ `auth.users` â†’ Clerk authentication
- **Solution**: Simplified schema to use separate `profiles` table structure
- **Lesson**: Supabase Auth tables can't be directly populated via SQL

#### **Error: `insert or update on table "libraries" violates foreign key constraint "libraries_creator_id_fkey"`**
- **Problem**: Libraries table referencing `profiles` table that didn't exist
- **Root Cause**: Circular dependency between tables
- **Solution**: Created minimal schema with just essential columns
- **Lesson**: Start simple, add complexity gradually

### **Phase 3: Environment Variable Issues**

#### **Error: `supabaseKey is required`**
- **Problem**: Missing environment variables for Supabase connection
- **Root Cause**: `SUPABASE_SERVICE_ROLE_KEY` not set in `.env.local`
- **Solution**: Added proper environment variables and restarted server
- **Lesson**: Always check environment variables first when getting connection errors

#### **Error: `Runtime Error: supabaseKey is required`**
- **Problem**: API route couldn't create Supabase client
- **Root Cause**: Environment variables not loaded or wrong keys used
- **Solution**: Used existing Supabase client from `@/lib/supabase/client`
- **Lesson**: Reuse existing working connections when possible

### **Phase 4: Permission Issues**

#### **Error: `permission denied for schema public` (code: 42501)**
- **Problem**: Service role key didn't have proper database permissions
- **Root Cause**: Service role key missing `USAGE` permission on `public` schema
- **Solution**: Granted proper permissions via SQL:
  ```sql
  GRANT USAGE ON SCHEMA public TO service_role;
  GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO service_role;
  ```
- **Lesson**: Service role keys need explicit permission grants

### **Phase 5: API Route Issues**

#### **Error: `500 Internal Server Error` with "Failed to fetch libraries"**
- **Problem**: API route crashing when trying to fetch libraries
- **Root Cause**: Multiple issues including missing functions and permission errors
- **Solution**: Fixed each issue systematically:
  1. Created database functions
  2. Fixed permissions
  3. Added proper error handling
- **Lesson**: 500 errors mean server-side crashes - check server logs

#### **Error: `{"error":"Failed to fetch libraries"}`**
- **Problem**: API returning generic error messages
- **Root Cause**: Poor error handling and logging
- **Solution**: Added detailed logging and error handling:
  ```typescript
  console.log('=== API CALL STARTED ===');
  console.log('Environment check:', { hasUrl, hasServiceRoleKey });
  console.log('Supabase client created successfully');
  ```
- **Lesson**: Always add detailed logging for debugging

### **Phase 6: Coordinate Format Issues**

#### **Error: `LngLatLike argument must be specified as a LngLat instance`**
- **Problem**: Database returning coordinates as string `"(-97.769,30.2669)"` but Mapbox expecting array `[-97.769, 30.2669]`
- **Root Cause**: PostGIS POINT format vs Mapbox coordinate format mismatch
- **Solution**: Created coordinate parsing function:
  ```typescript
  const parseCoordinates = (coordString: string): [number, number] => {
    const clean = coordString.replace(/[()]/g, '');
    const [lng, lat] = clean.split(',').map(Number);
    return [lng, lat];
  };
  ```
- **Lesson**: Database and frontend data formats often differ

### **Phase 7: Map Marker Issues**

#### **Error: Markers not respecting zoom level**
- **Problem**: Absolute positioned markers didn't scale with map zoom
- **Root Cause**: Manual coordinate projection vs Mapbox's native marker system
- **Solution**: Switched to native Mapbox markers:
  ```typescript
  const marker = new mapboxgl.Marker(markerEl)
    .setLngLat({ lng, lat })
    .addTo(map.current!);
  ```
- **Lesson**: Use native map features when available

#### **Error: `Maximum update depth exceeded`**
- **Problem**: Infinite loop in useEffect when managing markers
- **Root Cause**: `mapMarkers` state in dependency array causing re-renders
- **Solution**: Removed `mapMarkers` from dependencies:
  ```typescript
  }, [libraries, map.current, isMapLoaded, parseCoordinates, handleLibraryClick]);
  ```
- **Lesson**: Be careful with state dependencies in useEffect

### **Phase 8: Type Definition Issues**

#### **Error: `Argument of type '[number, number]' is not assignable to parameter of type 'string'`**
- **Problem**: TypeScript type mismatch between interface and actual data
- **Root Cause**: Interface defined `coordinates: [number, number]` but API returned `coordinates: string`
- **Solution**: Updated type definition to match reality:
  ```typescript
  export interface Library {
    coordinates: string; // PostGIS POINT format: "(-97.769,30.2669)"
  }
  ```
- **Lesson**: Keep type definitions in sync with actual API responses

## ðŸ”§ **Key Solutions Summary**

### **1. Database Setup**
- âœ… **Start simple**: Minimal schema with just essential columns
- âœ… **Create functions first**: Build CRUD functions before writing API code
- âœ… **Grant permissions**: Service role keys need explicit schema access

### **2. Environment Variables**
- âœ… **Check `.env.local`**: Ensure all required variables are set
- âœ… **Restart server**: Changes require server restart
- âœ… **Use correct keys**: Service role vs anon key for different purposes

### **3. API Development**
- âœ… **Add logging**: Detailed console logs for debugging
- âœ… **Handle errors**: Proper error handling and user feedback
- âœ… **Test incrementally**: Build and test one piece at a time

### **4. Map Integration**
- âœ… **Parse coordinates**: Convert database format to Mapbox format
- âœ… **Use native markers**: Let Mapbox handle positioning and scaling
- âœ… **Avoid infinite loops**: Careful with useEffect dependencies

### **5. Type Safety**
- âœ… **Match reality**: Keep TypeScript interfaces in sync with actual data
- âœ… **Handle mismatches**: Parse data when formats differ
- âœ… **Validate assumptions**: Don't assume data format matches interface

## ðŸ“š **Best Practices Learned**

1. **Start Simple**: Begin with minimal working examples
2. **Test Incrementally**: Build and test one feature at a time
3. **Log Everything**: Add detailed logging for debugging
4. **Check Permissions**: Service role keys need explicit grants
5. **Use Native Features**: Leverage Mapbox's built-in functionality
6. **Handle Data Formats**: Parse data when formats differ
7. **Restart After Changes**: Environment variables and some changes require server restart
8. **Check Dependencies**: Be careful with useEffect dependency arrays

## ðŸŽ¯ **Final Working Architecture**

- **Database**: Supabase with PostGIS, simplified schema
- **Authentication**: Clerk integration with proper user management
- **API**: RESTful endpoints with proper error handling
- **Map**: Mapbox GL JS with native markers
- **State Management**: React hooks with proper dependency management
- **Type Safety**: TypeScript interfaces matching actual data

## ðŸš€ **Next Steps Available**

With the foundation working, you can now:
- Add book management system
- Implement AI image parsing
- Add search and filtering
- Real-time updates and notifications
- Advanced geospatial queries
- User ratings and reviews

**The hard part is done!** Your Supabase integration is solid and ready for additional features.
